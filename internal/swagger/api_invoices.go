
/*
 * Octane API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type InvoicesApiService service
/*
InvoicesApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *InvoicesApiInvoicesGetOpts - Optional Parameters:
     * @param "Status" (optional.String) - 
     * @param "ForwardSortOffset" (optional.String) -  The sort column offset to start at when paging forwards
     * @param "BackwardSortOffset" (optional.String) -  The sort column offset to start at when paging backwards
     * @param "SortDirection" (optional.String) - 
     * @param "CustomerName" (optional.String) - 
     * @param "BackwardSecondarySortOffset" (optional.Int32) -  The id offset to start at when paging backwards
     * @param "StartTime" (optional.Time) - 
     * @param "SortColumn" (optional.String) - 
     * @param "ForwardSecondarySortOffset" (optional.Int32) -  The id offset to start at when paging forwards
     * @param "Limit" (optional.Int32) -  The number of items to fetch. Defaults to 10.
@return PastInvoices
*/

type InvoicesApiInvoicesGetOpts struct {
    Status optional.String
    ForwardSortOffset optional.String
    BackwardSortOffset optional.String
    SortDirection optional.String
    CustomerName optional.String
    BackwardSecondarySortOffset optional.Int32
    StartTime optional.Time
    SortColumn optional.String
    ForwardSecondarySortOffset optional.Int32
    Limit optional.Int32
}

func (a *InvoicesApiService) InvoicesGet(ctx context.Context, localVarOptionals *InvoicesApiInvoicesGetOpts) (PastInvoices, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue PastInvoices
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/invoices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForwardSortOffset.IsSet() {
		localVarQueryParams.Add("forward_sort_offset", parameterToString(localVarOptionals.ForwardSortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackwardSortOffset.IsSet() {
		localVarQueryParams.Add("backward_sort_offset", parameterToString(localVarOptionals.BackwardSortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortDirection.IsSet() {
		localVarQueryParams.Add("sort_direction", parameterToString(localVarOptionals.SortDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomerName.IsSet() {
		localVarQueryParams.Add("customer_name", parameterToString(localVarOptionals.CustomerName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackwardSecondarySortOffset.IsSet() {
		localVarQueryParams.Add("backward_secondary_sort_offset", parameterToString(localVarOptionals.BackwardSecondarySortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortColumn.IsSet() {
		localVarQueryParams.Add("sort_column", parameterToString(localVarOptionals.SortColumn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForwardSecondarySortOffset.IsSet() {
		localVarQueryParams.Add("forward_secondary_sort_offset", parameterToString(localVarOptionals.ForwardSecondarySortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v PastInvoices
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
InvoicesApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *InvoicesApiInvoicesUpcomingGetOpts - Optional Parameters:
     * @param "Status" (optional.String) - 
     * @param "ForwardSortOffset" (optional.String) -  The sort column offset to start at when paging forwards
     * @param "BackwardSortOffset" (optional.String) -  The sort column offset to start at when paging backwards
     * @param "SortDirection" (optional.String) - 
     * @param "CustomerName" (optional.String) - 
     * @param "BackwardSecondarySortOffset" (optional.Int32) -  The id offset to start at when paging backwards
     * @param "StartTime" (optional.Time) - 
     * @param "SortColumn" (optional.String) - 
     * @param "ForwardSecondarySortOffset" (optional.Int32) -  The id offset to start at when paging forwards
     * @param "Limit" (optional.Int32) -  The number of items to fetch. Defaults to 10.
@return UpcomingInvoices
*/

type InvoicesApiInvoicesUpcomingGetOpts struct {
    Status optional.String
    ForwardSortOffset optional.String
    BackwardSortOffset optional.String
    SortDirection optional.String
    CustomerName optional.String
    BackwardSecondarySortOffset optional.Int32
    StartTime optional.Time
    SortColumn optional.String
    ForwardSecondarySortOffset optional.Int32
    Limit optional.Int32
}

func (a *InvoicesApiService) InvoicesUpcomingGet(ctx context.Context, localVarOptionals *InvoicesApiInvoicesUpcomingGetOpts) (UpcomingInvoices, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue UpcomingInvoices
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/invoices/upcoming"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForwardSortOffset.IsSet() {
		localVarQueryParams.Add("forward_sort_offset", parameterToString(localVarOptionals.ForwardSortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackwardSortOffset.IsSet() {
		localVarQueryParams.Add("backward_sort_offset", parameterToString(localVarOptionals.BackwardSortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortDirection.IsSet() {
		localVarQueryParams.Add("sort_direction", parameterToString(localVarOptionals.SortDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomerName.IsSet() {
		localVarQueryParams.Add("customer_name", parameterToString(localVarOptionals.CustomerName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BackwardSecondarySortOffset.IsSet() {
		localVarQueryParams.Add("backward_secondary_sort_offset", parameterToString(localVarOptionals.BackwardSecondarySortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartTime.IsSet() {
		localVarQueryParams.Add("start_time", parameterToString(localVarOptionals.StartTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortColumn.IsSet() {
		localVarQueryParams.Add("sort_column", parameterToString(localVarOptionals.SortColumn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForwardSecondarySortOffset.IsSet() {
		localVarQueryParams.Add("forward_secondary_sort_offset", parameterToString(localVarOptionals.ForwardSecondarySortOffset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v UpcomingInvoices
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
